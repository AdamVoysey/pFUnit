
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_Installation Installation
///
/// \section sec_InstallingPFUNIT Installing pFUnit
///
/// Comentatry for the page.
///
/// \li \ref sec_Prerequisites
/// \li \ref sec_ObtainingPFUNIT
/// \li \ref sec_Manifest
/// \li \ref sec_Configuration
/// \li \ref sec_Building
/// <ul>
///   <li> \ref sec_BuildingPFUNITSerial </li>
///   <li> \ref sec_BuildingPFUNITMPI </li>
///   <li> \ref sec_BuildingPFUNITCleaning </li>
/// </ul>
/// \li \ref sec_Installation
///
/// \section sec_Prerequisites Prerequisites
///
/// The development work for pFUnit has mostly been carried out on a
/// mixture of systems, including high-end computers, Apple Mac OSX, and
/// linux-based systems.  A preliminary Windows/CYGWIN port has been
/// contributed by a user. Full use of the system depends on the following
/// being available.
/// 
/// - Fortran 2003+ (Tested with Intel 13.1+, NAG 5.3, GCC 4.8.1., IBM's XLF)
/// - The Message Passing Interface (MPI)
/// - GNU Make
/// - Python
/// 
/// The system is routinely tested with GNU, Intel, and NAG fortran
/// compilers and OpenMPI, as well as nightly regression testing.
///
/// \section sec_ObtainingPFUNIT Obtaining pFUnit
/// 
/// The best way to obtain pFUnit is to clone the git repository from
/// SourceForge as follows.
/// 
/// \code
/// # Read Only Access
/// git clone git://git.code.sf.net/p/pfunit/code pFUnit\endcode
///
/// This will create the directory pFUnit in the current working
/// directory.  
/// 
/// You may also visit the project page at SourceForge and
/// download the source tarfile "pFUnit.tar.gz" there.
///
/// http://sourceforge.net/projects/pfunit/
/// or
/// http://sourceforge.net/projects/pfunit/files/latest/download
/// 
/// Extracting this tarfile via a command like
/// 
/// `$ tar zxf ./pFUnit.tar.gz`
/// 
/// will place the pFUnit files into the current working directory.
/// 
/// For other ways to acquire the code visit
/// 
/// https://sourceforge.net/p/pfunit/code/ci/master/tree/
/// 
/// or contact the pFUnit team.
/// 
/// \section sec_Manifest Manifest - What's in the directory?
///
/// In the top level of the pFUnit distribution you will see the following
/// files.
/// 
/// COPYRIGHT - Contains information pertaining to the use and
/// distribution of pFUnit.
/// 
/// Examples - Contains examples of how to use pFUnit once it is
/// installed.
/// 
/// GNUmakefile - The top level makefile for building and installing
/// pFUnit.
/// 
/// bin - Executables used to construct and perform unit tests.
/// 
/// include - Files to be included into makefiles or source, including use
/// code.
/// 
/// source - Source code and scripts of the pFUnit library and framework.
/// 
/// tests - Source code for unit testing pFUnit itself.
///
/// \section sec_Configuration Configuration
/// Little needs to be done to configure pFUnit for the build, however
/// there are several environment variables on which the package depends.
/// 
/// `F90_VENDOR` - is set to include the correct makefile in $(TOP_DIR)/include,
/// i.e. GNU, Intel, NAG, or PGI.  Case insensitive file systems may cause
/// some confusion from time-to-time.
/// 
/// `F90` - is set to the Fortran compiler being used: e.g. ifort for Intel,
/// gfortran for GNU.
/// 
/// `COMPILER` - is set according to `F90_VENDOR` and is automatically set in
/// the top level makefile.
/// 
/// For MPI-based unit testing, your setup may require the following as well.
/// 
/// `MPIF90`\code
/// $ export MPIF90=mpif90\endcode
/// 
/// As a convenience for working with multiple MPI configurations, you may
/// also set the following.
/// 
/// `MPIRUN`\code
/// $ export MPIRUN=/some.path/mpirun\endcode
/// 
/// 
/// \section sec_Building Building pFUnit
/// \subsection sec_BuildingPFUNITSerial Building pFUnit for testing serial codes (Non-MPI)
/// 
/// 1. Change to the directory into which pFUnit has been placed.
/// 2. Set the environment variables (in bash):
/// \code
/// $ export F90=gfortran-mp-4.8
/// $ export F90_VENDOR=GNU\endcode
/// 3. To build pFUnit for unit testing of serial codes, execute make.
/// The unit tests for pFUnit itself will run automatically.
/// \code
/// $ make tests\endcode
/// 3.1 Occasionally on the first run through, one will get a spurious
/// (runtime) error, for example in the unix process component.
/// \code
/// Re-execute "make tests" to check again.\endcode
/// 4. At this point the pFUnit object library is in the source directory,
/// along with a large number of Fortran module files.
/// 
/// \subsection sec_BuildingPFUNITMPI Building pFUnit for testing parallel codes (MPI)
/// 
/// To build pFUnit for unit testing MPI-based codes, be sure that the
/// environment is properly set up for the MPI implementation you are
/// using. Depending on your local environment, you may need execute the
/// build within a batch or other job queing system, e.g. an interactive
/// batch job under PBS. The steps for building pFUnit start out the same
/// as for the serial case above, but add MPI=YES to the environment to
/// switch on MPI support.  The MPI-based unit tests for pFUnit itself
/// will run automatically.  Again, occasionally a spurious (runtime)
/// error may appear on the first execution.  
/// 
/// 3. Execute make as follows.
/// \code
/// $ make tests MPI=YES \endcode
/// 
/// 4. At this point an MPI-enabled pFUnit object library is in the source
/// directory, along with a large number of Fortran module files.
/// 
/// Also, one may get some harmless "no symbols" warnings when the pFUnit library is constructed.
/// 
/// \subsection sec_BuildingPFUNITCleaning Cleaning
/// 
/// To clean the pFUnit build directory for the space or to rebuild there
/// are two options.
/// 
/// 1. Make clean to remove object files and other intermediate products.
/// \code
/// $ make clean\endcode
/// 
/// 2. Make distclean to remove libraries and other more final products.
/// \code
/// $ make distclean\endcode
/// 
/// 3. Some directories support a `make src_clean` to remove intermediate
/// products in subdirectories.
/// 
/// 
/// \section sec_Installation Installation
/// \subsection sec_InstallationSerial Installation - Serial
/// 
/// To install pFUnit for regular use, set INSTALL_DIR to the location in
/// which to place pFUnit.  This can be done on the make command line.
/// For example, after compiling pFUnit for serial use (MPI absent or
/// MPI=NO), please try.
/// \code
/// $ # In the top of the pFUnit build directory.
/// $ make install INSTALL_DIR=/opt/pfunit/pfunit-serial\endcode
/// 
/// Note: you may need special priveleges to install in some locations,
/// e.g. via sudo.
/// 
/// To test the installation set PFUNIT to INSTALL_DIR, then change the
/// working directory to Examples in pFUnit distribution and execute
/// "buildIt," which will run a number of examples.  These include some
/// expected failures.  
/// \code
/// $ # In the top pFUnit build directory...
/// $ export PFUNIT=/opt/pfunit/pfunit-serial
/// $ pushd Examples
/// $ ./buildIt\endcode
/// 
/// \subsection sec_InstallationMPI Installation - MPI
/// 
/// For installing an MPI-enabled pFUnit library, change to the top of the
/// distribution and execute make with MPI=YES.  You may need to "make
/// distclean" first.  After compilation and pFUnit passes its self-tests,
/// then installation proceeds as for the serial case above.
/// \code
/// $ make install INSTALL_DIR=/opt/pfunit/pfunit-parallel\endcode
/// 
/// To test, set PFUNIT and go into Examples/MPI_Halo directory.
/// \code
/// $ # In the top pFUnit build directory...
/// $ export PFUNIT=/opt/pfunit/pfunit-parallel
/// $ # The variable MPIF90 must be set to the appropriate build script.
/// $ export MPIF90=mpif90
/// $ cd Examples/MPI_Halo/Semi-Automatic
/// $ make\endcode
/// 
/// This will compile and run a set of parallel examples that includes
/// intentional failures.
/// 
/// \subsection sec_InstallationDefaultDirectory Installation - DEFAULT DIRECTORY
/// 
/// If INSTALL_DIR is not set, "make install" will attempt to install
/// pFUnit into the top build directory.  This will create directories
/// such as lib and mod in the top level of the build directory and will
/// overwrite the include/base.mk with include/base-install.mk.  If this
/// is not desired, then "make develop" will put back the original
/// base.mk, which is the file to be used for development and building
/// pFUnit.  In general, we recommend installing to a directory that is not also the
/// build directory.
/// 

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_Usage Usage
///
/// \li \ref sec_UsageConfiguration
/// \li \ref sec_UsageHelloWorld
/// \li \ref sec_UsagePreprocessor
/// 
/// \section Usage
/// \subsection sec_UsageConfiguration Usage - Configuration
/// 
/// For regular use, after installation, the same compiler/MPI development
/// configuration that was used to build pFUnit should be used.  Once the
/// environment variables and paths associated with the environment are
/// set, to configure pFUnit, please set the following.
/// 
/// `PFUNIT` - set to the directory into which pFUnit was installed.
///
/// `F90_VENDOR` - set to Intel, GNU, NAG, or PGI accordingly.
/// 
/// \subsection sec_UsageHelloWorld Usage - Hello World
/// TBD
/// \subsection sec_UsagePreprocessor Usage - Preprocessor
/// TBD

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_Development Development
///
/// Generally pFUnit development is performed in the build directory
/// structure.  Care should be taken to make clean or distclean in between
/// configuration changes.  As stated above, it is best to set INSTALL_DIR
/// and "make install" pFUnit to another directory that can be placed in a
/// user's paths.  

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_FeedbackAndSupport Feedback & Support
///
///
/// \section sec_Feedback Feedback
/// \section sec_Support Support

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_FAQAndTips FAQ and Tips
///
/// \section sec_FAQ FAQ
/// 
/// \subsection ZeroTestsRun Zero Tests Run
/// <p><em>Symptom:</em>  The system under test compiles and runs fine, but reports zero tests run.</p>
/// <p><em>Solutions:</em>
/// <ul><li>There is no <code>testSuites.inc</code> file.  Please add a <code>testSuites.inc</code> that lists the suites to add via <code>ADD_TEST_SUITE(</code><em>the_suite_to_add</em><code>)</code>, one to a line.</li>
/// <li>There is no <code>-DUSE_MPI</code> passed to the compiler during the build. Please add to the compiler invokation.  Please see \ref SomeOfMyTestsAreNotRunning.</li></ul></p>
/// \subsection SomeOfMyTestsAreNotRunning Some Tests Are Not Running
/// <em>Symptom:</em>  The system under test compiles and runs fine, but reports that some tests don't run.
/// <p><em>Solutions:</em>
/// <ul><li>There is no <code>-DUSE_MPI</code> passed to the compiler during the build.  Please add as in the following example.
/// \code
/// % $PFUNIT/bin/pFUnitParser.py test_pio.pf test_pio.F90
/// % mpif90 -DUSE_MPI $PFUNIT/include/driver.F90 -I$PFUNIT/mod -L$PFUNIT/lib -lpfunit test_pio.F90
/// 
/// % mpirun -np 8 ./a.out
/// 
/// .
/// Time:         0.004 seconds
///   
///  OK\endcode
/// </li></ul></p>
///
/// \section sec_Tips Tips
///
/// <ol>
/// <li>Environment Modules - Though not strictly required, the Environment
/// Modules package can be a convenient way to package, maintain, and
/// switch between environments.  This can be particularly important for
/// pFUnit, which must be built using the same tool suite being used for
/// development, e.g. compilers, linkers, etc. [To do:  A sample pFUnit
/// modulefile is provided in the OTHER directory.] Environment Modules</li>
/// 
/// <li>Compile time errors like '"include [...]include/.mk" not found'
/// likely signify that you are not executing make in the top level
/// directory during a build.  Alternatively, during regular usage after
/// installation, PFUNIT has not been set. 
/// 
/// During building, if you wish to compile in a subdirectory of within the
/// pFUnit heriarchy, please try setting the COMPILER environment variable
/// on the make command line.  For example:
/// 
/// \code
/// $ make all COMPILER=Intel\endcode</li>
/// 
/// <li>If you wish to see the intermediate files, use the target .PRECIOUS
/// in the makefile to keep them from being deleted. For example:
/// 
/// \code
/// # In GNUmakefile
/// .PRECIOUS: %_cpp.F90\endcode </li>
/// </ol>
///

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_PlatformSpecific Platform Specific Notes
///
/// \section sec_MacOSX Mac OSX
/// 
/// The MacPorts package management system is a convenient way to install
/// and maintain many packages, including gcc which includes gfortran.
/// 
/// \section sec_WindowsCYGWIN Windows/CYGWIN
/// 
/// User contributed code for Windows/CYGWIN has been added, but is
/// currently not tested and supported by the pFUnit team. At this
/// writing, 2013-1031, serial Examples and MPI are not known to be
/// supported.  Please contact us if you wish to either contribute or
/// otherwise discuss this port.

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_Acknowledgments Acknowledgments
///
///

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_KnownInstallationsAndVersions Known Installations & Versions
///
///

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_TODO TODO
///
/// \link group_Logging View All Logging Classes \endlink

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_pFUnitParser The Preprocessor - pFUnitParser
///
/// Overview of Preprocessor (pFUnitParser.py)
///
/// \li \ref sec_UsingThePreprocessor
/// \li \ref sec_TestCase
/// \li \ref sec_mpiTest

///////////////////////////////////////////////////////////////////////////
/// \section sec_UsingThePreprocessor Using The Preprocessor
///
/// How to write tests using the ".pf" files.



///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
/// \page page_Versioning API Versioning

/// \link group_Versioning View All Versioning Classes \endlink

/// \defgroup group_Logging Diagnostic logging features
/// See \ref Logging for a detailed description.

/// \defgroup group_Versioning Versioning System
/// See \ref Versioning for a detailed description.

