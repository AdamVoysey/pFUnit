#!/bin/bash

# pFUnit source/MakeDependenciesInclude

# Generates makefile dependencies from "use" statements in
# Fortran files. Specifically built to pFUnit conventions.
#
# M. Rilee, 2013-0815

# TODO:  Move this and its cousins to a single "$(TOP)/bin/MakeDependenciesInclude".

# NAG_IgnoreCompilerFlags - A klugly edit of the flags passed to NAG to appease cpp.

NAG_IgnoreCompilerFlags () {
   echo $* | \
       sed s/-fpp//g | \
       sed s/-mismatch_all//g | \
       sed s/-f2008//g | \
       sed s/-w=uda//g | \
       sed s/-openmp//g
}

# Check on Fortran

if [ x${FC} = x ]; then
    echo $0 ERROR: Environment variable FC not set to Fortran compiler.
    exit
fi

# rm -f *-tmp.F90 penmp

# Dependency injection...
# Intermediate & target files...
export tmpFile=./DependencyCheck-1.tmp; 
export outFile=./dependencies.inc

# We do not automatically check to see if references are satisfied
# within the using file, so we can IGNORE those references by naming
# them here.
#
# Note: PrivateException is in Exception.F90, there is no
# PrivateException.F90 or PrivateException.o.
#
IGNORE="PrivateException"
# May need to consider case, however if we stick to our current coding
# style, we should be okay.

# Have trouble with commented use statements... see grep -v "\!" below.
# Need to watch out for use statements that refer to tokens with use or used.
# Also may have some trouble with files/modules with "use" in their names.

echo "# pFUnit: source/MakeDependenciesInclude..." > ${tmpFile}; 
echo -e "# source/${outFile} automatically generated: " `date "+%Y-%m%d-%H%M-%S"` "\n" >> ${tmpFile}; 

#+ echo MakeDependenciesInclude: FC=${FC}
#+ echo MakeDependenciesInclude: COMPILER=${COMPILER}
#+ echo MakeDependenciesInclude: F90_VENDOR=${F90_VENDOR}

rm -f tmp999.F90
for i in *.F90; do 
   # Dangerous -- but get the command line args...
   # ${FC} $* -E ${i} > tmp999.F90
#   if [[ x${FC} =~ .*(nagfor|NAGFOR).* ]]; then
#+     echo MakeDependenciesInclude:  Working on ${i}
   if [[ x${COMPILER} =~ .*(nag|NAG).* ]]; then
       # See include/nag.mk.                                                         
#+       echo MakeDependenciesInclude: cpp
#+       echo cpp -traditional -C -DNAG `NAG_IgnoreCompilerFlags $* ` ${i} \> tmp999.F90
       cpp -traditional -C -DNAG `NAG_IgnoreCompilerFlags $* ` ${i} > tmp999.F90
   else
       echo MakeDependenciesInclude: FC -E
       ${FC} $* -E ${i} > tmp999.F90
   fi
#+   echo MakeDependenciesInclude:  Writing to ${tmpFile}
   echo `echo $i | cut -f 1 -d. - `".o: " | tr -d "\n" >> ${tmpFile};
      grep -i use tmp999.F90 | grep -v used | cut -d, -f1 - | sort | tr -s " \t\v" | uniq - | \
      egrep -v ${IGNORE} | \
      sed 's/use//g' | sed 's/_mod/.o/g' | egrep "\.o" | grep -v "\!\!" | tr -d "\n" | tr -s " \t\v" >> ${tmpFile};  
   echo -e "\n" >> ${tmpFile}; 
# exit
#   cp tmp999.F90 ${i}-tmp.F90
   rm -f tmp999.F90
done; 

#+echo MakeDependenciesInclude:  Writing to ${outFile}
cat ${tmpFile} | grep -iv Mpi\*.o > ${outFile}; 
   cat ${tmpFile} | grep -i pfunit\*.o | sed 's/[a-zA-Z0-9]*[m|M]pi[.a-zA-Z0-9]*//g' >> ${outFile}; 
   echo -e "\nifeq (\$(USEMPI),YES)\n" >> ${outFile}; 
   cat ${tmpFile} | grep -i Mpi\*.o >> ${outFile}; 
   echo -e "\nendif\n" >> ${outFile}

# The following converts the occurrences of .o in ${outFile} to $(OBJ_EXT)
sed -i -e 's&\.o&$(OBJ_EXT)&g' ${outFile}
\rm -f ${outFile}-e
