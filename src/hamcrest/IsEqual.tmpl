@tkr_parameters all
[(integer, default, 0)]
[(integer, 32, 0)]
[(integer, 64, 0)]
[(real, default, 0)]
[(real, double, 0)]
[(real, 32, 0)]
[(real, 64, 0)]
[(real, 128, 0)]
[(complex, default, 0)]
[(complex, double, 0)]
[(complex, 32, 0)]
[(complex, 64, 0)]
[(complex, 128, 0)]
@end tkr_parameters

@template(IsEqual,[case])
module pf_{name}_mod
  use iso_fortran_env
  use pf_AbstractMatcher_mod
  use pf_MatcherDescription_mod
  implicit none
  private

  public :: {name}
  public :: equal_to

  type, extends(AbstractMatcher) :: {name}
     private	 
     {case.type}(kind={case.kind}) :: expected_value
   contains
     procedure :: matches
     procedure :: describe_to
     procedure :: describe_mismatch
  end type {name}

  interface equal_to
     module procedure :: equal_to_
  end interface equal_to

contains


  function equal_to_(operand) result(matcher)
    type ({name}) :: matcher
    {case.type}(kind={case.kind}), intent(in) :: operand

    matcher%expected_value = operand
  end function equal_to_


  subroutine describe_to(this, description)
    class({name}), intent(in):: this
    class(MatcherDescription), intent(inout) :: description
    call description%append_value(this%expected_value)
  end subroutine describe_to


  subroutine describe_mismatch(this, actual, description)
    class({name}), intent(in) :: this
    class(*), intent(in) :: actual
    class(MatcherDescription), intent(inout) :: description
    call description%append_text("was ")
    call description%append_value(actual)
  end subroutine describe_mismatch
     

  logical function matches(this, actual_value)
    class({name}), intent(in) :: this
    class(*), intent(in) :: actual_value

    select type (actual_value)
    type is ({case.type}(kind={case.kind}))
       matches = (actual_value == this%expected_value)
    class default
       matches = .false.
    end select

  end function matches

end module pf_{name}_mod
@end template

@template(uses,[case])
   use pf_IsEqual{mangle}_mod
@end template

@instantiate(IsEqual, all)

module pf_IsEqual_mod
  @instantiate(uses, all)
end module pf_IsEqual_mod

