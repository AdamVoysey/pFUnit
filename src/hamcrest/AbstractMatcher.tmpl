@tkr_parameters all
[(integer, default, 0)]
[(integer, 32, 0)]
[(integer, 64, 0)]
[(real, default, 0)]
[(real, double, 0)]
[(real, 32, 0)]
[(real, 64, 0)]
[(real, 128, 0)]
[(complex, default, 0)]
[(complex, double, 0)]
[(complex, 32, 0)]
[(complex, 64, 0)]
[(complex, 128, 0)]
@end tkr_parameters

@template(AbstractMatcher,[case])

module pf_{name}_mod
   use pf_MatcherDescription_mod, only: SelfDescribing
   implicit none
   private

   public :: {name}

   type, abstract, extends(SelfDescribing) :: {name}
   contains
      procedure(matches), deferred :: matches
      procedure(describe_mismatch), deferred :: describe_mismatch
   end type {name}

   abstract interface

      logical function matches(this, actual_value)
         import {name}
         class ({name}), intent(in) :: this
         class(*), intent(in) :: actual_value
      end function matches

      subroutine describe_mismatch(this, actual, description)
         use pf_MatcherDescription_mod, only: MatcherDescription
         import {name}
         class ({name}), intent(in) :: this
         class (*), intent(in) :: actual
         class (MatcherDescription), intent(inout) :: description
      end subroutine describe_mismatch
   end interface

 end module pf_{name}_mod
@end template

@template(uses,[case])
   use pf_AbstractMatcher{mangle}_mod
@end template

@instantiate(AbstractMatcher, all)

module pf_AbstractMatcher_string_mod
  use pf_MatcherDescription_mod, only: SelfDescribing
  implicit none
  private

  public :: AbstractMatcher_string

   type, abstract, extends(SelfDescribing) :: AbstractMatcher_string
   contains
      procedure(matches), deferred :: matches
      procedure(describe_mismatch), deferred :: describe_mismatch
   end type AbstractMatcher_string

   abstract interface

      logical function matches(this, actual_value)
         import AbstractMatcher_string
         class (AbstractMatcher_string), intent(in) :: this
         class(*), intent(in) :: actual_value
      end function matches

      subroutine describe_mismatch(this, actual, description)
         use pf_MatcherDescription_mod, only: MatcherDescription
         import AbstractMatcher_string
         class(AbstractMatcher_string), intent(in) :: this
         class(*), intent(in) :: actual
         class(MatcherDescription), intent(inout) :: description
      end subroutine describe_mismatch
   end interface

end module pf_AbstractMatcher_string_mod

module pf_AbstractMatcher_mod
  @instantiate(uses, all)
  use pf_AbstractMatcher_string_mod
end module pf_AbstractMatcher_mod
 
   
