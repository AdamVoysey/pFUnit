! Goal is not to exhaustively test all combinations, but rather at least
! one variant along each axis:
! Reference comparison:  default real scalar


module Test_AssertRelativelyEqual_Real_mod
   use, intrinsic :: iso_fortran_env, only: REAL32, REAL64
   use, intrinsic :: iso_fortran_env, only: REAL128
   use pf_StringUtilities_mod
   use pf_SourceLocation_mod
   use pf_Exceptionlist_mod
   use FUnit, only: SourceLocation, throw, anyExceptions, AssertExceptionRaised
   use pf_AssertBasic_mod
   use pf_AssertReal_0d_mod
   use pf_AssertReal_1d_mod
   use pf_AssertReal_2d_mod
   use pf_AssertReal_3d_mod
#ifdef _REAL32_IEEE_SUPPORT
      use MakeInf_mod, only:  makeInf_32
#endif
#ifdef _REAL64_IEEE_SUPPORT
      use MakeInf_mod, only:  makeInf_64
#endif
#ifdef _REAL128_IEEE_SUPPORT
      use MakeInf_mod, only:  makeInf_128
#endif
   implicit none
      
   @suite(name='AssertRelativelyEqual_Real_suite')

   real(kind=REAL32), parameter :: good = 1
   real(kind=REAL32), parameter :: bad  = -999

   character(len=1), parameter :: NL = new_line('a')
contains


   ! First a series of tests that should not raise exceptions.


   @test
   subroutine test_relatively_equal_scalar()
      @assertRelativelyEqual(1, 1.1, 0.2)
      @assertRelativelyEqual(1.0, 1.1, 0.2)
      @assertRelativelyEqual(1.0, 1.1, 0.2)

#ifdef _REAL32
      @assertRelativelyEqual(1, 1.1_REAL32, 0.2)
      @assertRelativelyEqual(1.0, 1.1_REAL32, 0.2)
      @assertRelativelyEqual(1.0_REAL32, 1.1_REAL32, 0.2)

      @assertRelativelyEqual(1, 1.1_REAL32, 0.2_REAL32)
      @assertRelativelyEqual(1.0, 1.1_REAL32, 0.2_REAL32)
      @assertRelativelyEqual(1.0_REAL32, 1.1_REAL32, 0.2_REAL32)
#endif
      
#ifdef _REAL64
      @assertRelativelyEqual(1, 1.1_REAL64, 0.2)
      @assertRelativelyEqual(1.0, 1.1_REAL64, 0.2)
      @assertRelativelyEqual(1.0_REAL64, 1.1_REAL64, 0.2)

      @assertRelativelyEqual(1, 1.1_REAL64, 0.2_REAL64)
      @assertRelativelyEqual(1.0, 1.1_REAL64, 0.2_REAL64)
      @assertRelativelyEqual(1.0_REAL64, 1.1_REAL64, 0.2_REAL64)
#endif

#ifdef _REAL128
      @assertRelativelyEqual(1, 1.1_REAL128, 0.2)
      @assertRelativelyEqual(1.0, 1.1_REAL128, 0.2)
      @assertRelativelyEqual(1.0_REAL128, 1.1_REAL128, 0.2)

      @assertRelativelyEqual(1, 1.1_REAL128, 0.2_REAL128)
      @assertRelativelyEqual(1.0, 1.1_REAL128, 0.2_REAL128)
      @assertRelativelyEqual(1.0_REAL128, 1.1_REAL128, 0.2_REAL128)
#endif

   end subroutine test_relatively_equal_scalar

   @test
   subroutine test_relatively_equal_1D_actual

      @assertRelativelyEqual(1, [1.1], 0.2)
      @assertRelativelyEqual(1.0, [1.1,1.1,1.1], 0.2)
      @assertRelativelyEqual(1.1, [1.1,1.1,1.1],0.2)
      @assertRelativelyEqual([1,2], [1.1,2.1], 0.2)
      @assertRelativelyEqual([1.0,2.0], [1.1,2.1], 0.2)
      @assertRelativelyEqual([1.1,2.1], [1.1,2.1], 0.2)

#ifdef _REAL32      
      @assertRelativelyEqual(1, [1.1_REAL32], 0.2)
      @assertRelativelyEqual(1.0, [1.1_REAL32,1.1_REAL32,1.1_REAL32], 0.2)
      @assertRelativelyEqual(1.1_REAL32, [1.1_REAL32,1.1_REAL32,1.1_REAL32],0.2)
      @assertRelativelyEqual([1,2], [1.1_REAL32,2.1_REAL32], 0.2)
      @assertRelativelyEqual([1.0,2.0], [1.1_REAL32,2.1_REAL32], 0.2)
      @assertRelativelyEqual([1.1_REAL32,2.1_REAL32], [1.1_REAL32,2.1_REAL32], 0.2)

      @assertRelativelyEqual(1, [1.1_REAL32], 0.2_REAL32)
      @assertRelativelyEqual(1.0, [1.1_REAL32,1.1_REAL32,1.1_REAL32], 0.2_REAL32)
      @assertRelativelyEqual(1.1_REAL32, [1.1_REAL32,1.1_REAL32,1.1_REAL32],0.2_REAL32)
      @assertRelativelyEqual([1,2], [1.1_REAL32,2.1_REAL32], 0.2_REAL32)
      @assertRelativelyEqual([1.0,2.0], [1.1_REAL32,2.1_REAL32], 0.2_REAL32)
      @assertRelativelyEqual([1.1_REAL32,2.1_REAL32], [1.1_REAL32,2.1_REAL32], 0.2_REAL32)
#endif

#ifdef _REAL64
      @assertRelativelyEqual(1, [1.1_REAL64], 0.2)
      @assertRelativelyEqual(1.0, [1.1_REAL64,1.1_REAL64,1.1_REAL64], 0.2)
      @assertRelativelyEqual(1.1_REAL64, [1.1_REAL64,1.1_REAL64,1.1_REAL64],0.2)
      @assertRelativelyEqual([1,2], [1.1_REAL64,2.1_REAL64], 0.2)
      @assertRelativelyEqual([1.0,2.0], [1.1_REAL64,2.1_REAL64], 0.2)
      @assertRelativelyEqual([1.1_REAL64,2.1_REAL64], [1.1_REAL64,2.1_REAL64], 0.2)

      @assertRelativelyEqual(1, [1.1_REAL64], 0.2_REAL64)
      @assertRelativelyEqual(1.0, [1.1_REAL64,1.1_REAL64,1.1_REAL64], 0.2_REAL64)
      @assertRelativelyEqual(1.1_REAL64, [1.1_REAL64,1.1_REAL64,1.1_REAL64],0.2_REAL64)
      @assertRelativelyEqual([1,2], [1.1_REAL64,2.1_REAL64], 0.2_REAL64)
      @assertRelativelyEqual([1.0,2.0], [1.1_REAL64,2.1_REAL64], 0.2_REAL64)
      @assertRelativelyEqual([1.1_REAL64,2.1_REAL64], [1.1_REAL64,2.1_REAL64], 0.2_REAL64)
#endif

#ifdef _REAL128
      @assertRelativelyEqual(1, [1.1_REAL128], 0.2)
      @assertRelativelyEqual(1.0, [1.1_REAL128,1.1_REAL128,1.1_REAL128], 0.2)
      @assertRelativelyEqual(1.1_REAL128, [1.1_REAL128,1.1_REAL128,1.1_REAL128],0.2)
      @assertRelativelyEqual([1,2], [1.1_REAL128,2.1_REAL128], 0.2)
      @assertRelativelyEqual([1.0,2.0], [1.1_REAL128,2.1_REAL128], 0.2)
      @assertRelativelyEqual([1.1_REAL128,2.1_REAL128], [1.1_REAL128,2.1_REAL128], 0.2)

      @assertRelativelyEqual(1, [1.1_REAL128], 0.2_REAL128)
      @assertRelativelyEqual(1.0, [1.1_REAL128,1.1_REAL128,1.1_REAL128], 0.2_REAL128)
      @assertRelativelyEqual(1.1_REAL128, [1.1_REAL128,1.1_REAL128,1.1_REAL128],0.2_REAL128)
      @assertRelativelyEqual([1,2], [1.1_REAL128,2.1_REAL128], 0.2_REAL128)
      @assertRelativelyEqual([1.0,2.0], [1.1_REAL128,2.1_REAL128], 0.2_REAL128)
      @assertRelativelyEqual([1.1_REAL128,2.1_REAL128], [1.1_REAL128,2.1_REAL128], 0.2_REAL128)
#endif
      
   end subroutine test_relatively_equal_1D_actual


   @test
   subroutine test_rel_equal_fail_scalar_with_tolerance()
      ! This should succeed.
      call assertRelativelyEqual(10.0, 11.0, 0.2)
      ! But this should fail
      call assertRelativelyEqual(10.0, 12.0, 0.1)
      call assertExceptionRaised(&
           & 'AssertRelativelyEqual failure:' // NL // &
           & '           Expected: <10.00000>' // NL // &
           & '             Actual: <12.00000>' // NL // &
           & '    Rel. difference: <0.2000000> (greater than tolerance of 0.1000000)' &
           & )
   end subroutine test_rel_equal_fail_scalar_with_tolerance

end module Test_AssertRelativelyEqual_Real_mod
   
